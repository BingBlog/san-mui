<template>
    <div>
        <h3>
            Progress
        </h3>
        <h4>indeterminate linear progress</h4>
        <san-linear-progress />
        <h4>indeterminate circular progress</h4>
        <san-circular-progress />
        <san-circular-progress size="60" />
        <san-circular-progress size="100" />
        <h4>circular progress stroke width</h4>
        <san-circular-progress strokeWidth="1" />
        <san-circular-progress size="60" strokeWidth="5" />
        <san-circular-progress size="100" strokeWidth="10" />

        <h4>determinate linear progress {{value}}</h4>
        <san-linear-progress mode="determinate" value="{{value}}" />

        <h4>determinate circular progress {{value}}</h4>
        <san-circular-progress mode="determinate" value="{{value}}" />
        <san-circular-progress mode="determinate" value="{{value}}" size="60" />
        <san-circular-progress mode="determinate" value="{{value}}" size="100" />
    </div>
</template>

<script>

import {LinearProgress, CircularProgress} from '../src/Progress';
import '../src/Progress/LinearProgress.styl';
import '../src/Progress/CircularProgress.styl';
import '../src/Button/Button.styl';

export default {

    components: {
        'san-linear-progress': LinearProgress,
        'san-circular-progress': CircularProgress
    },

    initData() {
        return {
            value: 0
        };
    },

    attached() {
        setInterval(() => {
            let value = this.data.get('value');
            this.data.set('value', (value + Math.ceil(Math.random() * 20)) % 100);
        }, 1000);
    }

}

</script>

<style>
.demo-buttion-row {
    padding: 1rem 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
}
</style>
